




class Solution {
    public:
    ListNode* reverse(ListNode* head){                                                                     
        ListNode* curr = head;
        ListNode* prev = NULL;
        while(curr != NULL){
            ListNode* nxt = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nxt;
        }
        return prev;
    }
    ListNode* findMid(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head->next;
        ListNode* curr = head;
        while(fast != NULL && fast->next !=  NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
public:
    bool isPalindrome(ListNode* head) {
        ListNode* mid = findMid(head);

        //Reverse list after middle
        ListNode* temp = mid->next;
        mid->next = reverse(temp);

        ListNode* head1 = head;
        ListNode* head2 = mid->next;

        while(head2 != NULL){
            if(head1->val != head2->val){
                return 0;
            }
            head1 = head1->next;
            head2 = head2->next;
        }
       return true;
    }
};   



